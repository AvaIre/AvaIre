
#--------------------------------------------------------------------------
# Welcome to the AvaIre Configuration
#--------------------------------------------------------------------------
#
# Below you'll find all the configurable options for Ava, if you're using
# a plugin that you want to configure, you should look for a config file
# in the "plugins/plugin name" folder.
#
# The configuration is written in a format known as YAML, you can learn
# more about the format at https://learnxinyminutes.com/docs/yaml
#
# Need to validate if the config has no errors and will pass Avas config
# management system? Try out https://codebeautify.org/yaml-validator
#
# Got any questions? Contact the development team on the official support
# server for Ava at https://avairebot.com/support
#

#--------------------------------------------------------------------------
# Application Environment
#--------------------------------------------------------------------------
#
# The application environment determines what is logged to the console, and
# what applications are loaded, this is to give a better user experience
# since having the console flooded with information can be very
# overwhelming if you don't know what you're looking at.
#
# AvaIre supports two different environments, "production" and "development"
#
# Production is used for minimal console output and for all parts of the
# application to be enabled. Development is used for debugging messages
# and preventing some parts of the application from running, to stop
# in-development changes from ruining the production environment.
#

environment: 'production'

#--------------------------------------------------------------------------
# Discord Application Information
#--------------------------------------------------------------------------
#
# Discord application information is things like your application token,
# application id, application secret, etc. To run a Discord bot you'll
# need an application token, if you don't already have an application
# with discord you can easily create one in two minutes.
#
# Start by going to the link below, create a new application, give it some
# name, then click on "Create a Bot User", and you're good to go!
# https://discordapp.com/developers/applications/me
#
# AvaIre needs your Discord application token to login and interact with
# users, and optionally the application ID for handling music using
# Lavalink instead of doing it internally, you can also use the
# application ID to create a invite link for your bot.
#

discord:

  # This is your Discord application client id, if you don't have a Discord
  # application, check the link above and follow the short guide to
  # create one, once you have it, replace the text between the
  # quotes with your client id.
  #
  clientId: 'YourBotClientIdShouldGoHere'

  # This is your Discord application token, if you don't have a Discord
  # application, check the link above and follow the short guide to
  # create one, once you have it, replace the text between the
  # quotes with your token.
  #
  token: 'YourBotTokenShouldGoHere'

  # This is the OAuth2 URL used for invite links, you should replace
  # the "<client_id>" with your Discord application client ID to
  # make the link valid so people can actually use it to invite
  # your bot to their server.
  #
  oauth: 'https://discordapp.com/oauth2/authorize?&client_id=<client_id>&scope=bot&permissions=66186303'

#--------------------------------------------------------------------------
# Database Information
#--------------------------------------------------------------------------
#
# AvaIre uses a database for storing things like custom prefixes, playlists,
# user XP and levels, statistics, autoroles, aliases and everything else.
#
# AvaIre currently supports MySQL and SQLite database types, with support for
# more types coming in the future, to get started simply just populate the
# fields below with your database login information.
#
# Note: When using a MySQL database make sure the database user has permission
# to create, delete and edit tables in the database you want to use, Ava uses
# a migration system that will create all the needed tables, and roll out
# changes between versions automatically, this require creating new
# tables, and editing and deleting existing tables.
#

database:

  # This is the database type that Ava should use, "MySQL" is used by default however
  # it can be changed to "SQLite" if you'd like to use a flatfile database instead.
  #
  type: 'mysql'

  #------------------------------------------------------------------------
  # SQLite Settings
  #------------------------------------------------------------------------
  #
  # Ths is the SQLite settings used in Ava, by default MySQL is used so if
  # you want to use the SQLite setup, change the "type" value above to
  # SQLite and you should be good to go!
  #
  # SQLite does not require any external software to be installed to use it.
  #

  # This is the name of the flatfile used for the SQLite database, although
  # SQLite has support for in-memory databases, Ava does not yet support
  # them, if you just want to try using SQLite you should be fine
  # leaving the value as "database.sqlite"
  #
  filename: 'database.sqlite'

  #------------------------------------------------------------------------
  # MySQL Settings (Recommended)
  #------------------------------------------------------------------------
  #
  # This is the MySQL settings used in Ava, MySQL is used by default and is
  # recommend for use in general as it's more stable and has more features
  # than SQLite. You must install a MySQL server to use the MySQL database
  # settings, if you're on hosting the bot on a VPS, using the default
  # "mysql-server" package should be fine, if you're on Windows/Mac,
  # using something like XAMPP is a great alternative.
  #
  # XAMPP Website: https://www.apachefriends.org/index.html
  #

  # This is the name of the database that Ava should use for all tables.
  #
  database: 'avaire'

  # This is the hostname of the database, if you're hosting the database on
  # the same machine the bot is also hosted on you should be fine keeping
  # it as "localhost", if you're using an external server for database
  # hosting you could use the IP address here.
  #
  hostname: 'localhost'

  # This is the username for the user that should be used by Ava to access
  # the database, the user should have permission to create, read,
  # update and delete tables in order for Ava to work correctly.
  #
  username: 'username'

  # The password for the database user, used to access the database.
  #
  password: 'password'

  # Determine if server certificates should be verified upon connecting to
  # the database, disabling this will still allow for a valid connection
  # from a cryptographic perspective, but the database server will not
  # be verified if it is actually the right server or not.
  #
  verifyServerCertificate: true

  #--------------------------------------------------------------------------
  # Default Command Prefix
  #--------------------------------------------------------------------------
  #
  # All internal commands registered with Ava will be linked to a command
  # category, each category has a default prefix which are used for all
  # commands linked to that category, below you can set the default
  # prefix used by all the official AvaIre command categories.
  #
  # Note: Plugins that adds commands and categories to the Ava registry doesn't
  # necessarily have to follow the default prefix set below, check in with the
  # developer for the plugin about the command prefix if one is used, or just
  # change the prefix for the category using the "Change Prefix" command.
  #

  default-prefix: '!'

  # The system commands can only be used by bot administrators, bot
  # administrators are users who have their user ID in the
  # "botAccess" field in the config.
  #
  system-prefix: ';'

  #--------------------------------------------------------------------------
  # Bot Status
  #--------------------------------------------------------------------------
  #
  # Once every minute, Ava will change her "playing" status to something on
  # the list below, you can define what type of status it is by prefixing
  # the status with one of the options below.
  #
  #   "watching:something" This produces "Watching something"
  #   "listening:some cool music" This produces "Listening to some cool music"
  #   "streaming:video games" This produces "Streaming video games"
  #
  # If no prefix is given the playing status type will be used instead.
  #

  playing:
      - '!help'
      - 'watching:avairebot.com'
      - 'listening:%users% users'
      - 'playing:in %guilds% servers'

  #--------------------------------------------------------------------------
  # Bot Access (Bot Administrators)
  #--------------------------------------------------------------------------
  #
  # The list below should contain a list of user IDs of people you want to be
  # able to access all system commands for Ava, things like restarting,
  # system information, code evaluation, etc.
  #
  # You can find your user ID by using the !userid command in Ava.
  #

  botAccess:
      - '88739639380172800'

  #--------------------------------------------------------------------------
  # Sentry.io Error Logging
  #--------------------------------------------------------------------------
  #
  # Sentry.io is an open source error tracking service, it can provide a lot
  # of helpful information to developers on what is going wrong, and where
  # in real-time, Sentry.io uses a DSN url for establishing a link
  # between the bot and their service, you can enter your DSN
  # url below if yo want to enable Sentry.io error logging.
  #
  # To learn more, checkout: https://sentry.io/welcome/
  #

  sentryDsn: ''

  #--------------------------------------------------------------------------
  # Web Servlet - Prometheus Metrics & API
  #--------------------------------------------------------------------------
  #
  # Ava uses an internal API to power outside applications by allowing the
  # apps to pull information about the bot directly from it, it also
  # collects and exposes internal metrics which can be helpful for
  # seeing what is happening inside the bot in real-time, all
  # this is powered by an internal web servlet.
  #
  # The API are exposed on "ip:port", where the port is the web servlet port
  # defined below, note that only the routes that are enabled will actually
  # be exposed through the API, so you can fine tune what you want to
  # expose to the rest of the world.
  #

  web-servlet:

      # Ava uses Prometheus metrics for tracking a long list of different things
      # within the application during runtime, the metrics are then displayed
      # using Grafana to users on a web-dashboard using graphs.
      #
      # For setup guides, see:
      #
      #   https://prometheus.io/
      #   https://grafana.com/
      #
      metrics: true

      # Ava exposes some API endpoints for interacting with the bot or pulling
      # information about of the bot in real-time, below you'll find a list
      # of different types of API endpoints which can be exposed in
      # the internal API.
      #
      api-routes:

          # Exposes a per-server leaderboard route for getting the 100 users on
          # the given server ID, as well as some level role and XP settings
          # information.
          #
          # Route:
          #   GET  /leaderboard/:id
          #
          leaderboard: true

          # Exposes a player cleanup route which for getting a list of expired user
          # XP records, any IDs returned from the route are IDs for users who are
          # no long on the server the record is attached to.
          #
          # Route:
          #   GET  /players/cleanup
          #
          players: true

          # Exposes multiple guild information routes, as well as cleanup routes,
          # the information routes can be used to pull information about a
          # specific server by their ID, or to check if the bot is on the
          # server with the given ID, while the cleanup routes can be
          # used to get or delete expired and old records for guilds
          # the bot is no longer on.
          #
          # Routes:
          #   POST /guilds/cleanup
          #   GET  /guilds/cleanup
          #   GET  /guilds/:ids/exists
          #   GET  /guilds/:ids
          #
          guilds: true

          # Exposes a stats route which can be used to get some stats on individual
          # shards, the machine the bot is running on, as well as uptime and
          # global collected bot info.
          #
          # Route:
          #   GET  /stats
          #
          stats: true

      # The port the API and metrics should be exposed to, the port must not be used
      # by another application on the system, otherwise the API won't be able to
      # start up correctly.
      #
      port: 1256

      # This is the auth token that should be given to validate incoming vote requests,
      # any requests to the vote route that is either missing the auth header, or
      # has a key that does not match the key below will be ignored.
      #
      authToken: 'avaire-auth-token'

  #--------------------------------------------------------------------------
  # Vote Locking
  #--------------------------------------------------------------------------
  #
  # Vote locking will limit some features so only users who have voted for the
  # bot will be able to use them, voting resets every 12 hours.
  #
  # When using the vote-lock feature, make sure the vote webhook has been setup
  # correctly with the auth token, you can find the auth token setting in the
  # metrics above. without a valid token setup the votes will not be synced
  # in real-time, which can cause a lot of lag between the user voting,
  # and them being allowed to use vote locked features.
  #

  vote-lock:

      # This option determines if the vote-locking feature should be enabled at all,
      # if set to true, any command or feature using the "vote" middleware will be
      # restricted to users who have voted for the bot within the last 12 hours.
      #
      # Enabling this option exposes a "/vote" POST route in the web-servlet which
      # can be used to handle vote request sent by DBL, making it easy and
      # automatic to reward users when they vote.
      #
      enabled: false

      # This option determines where the vote check requests generated using the "!vote check"
      # command should be sent, if this option is set to false all requests will use the
      # "vote-sync-token" below to try and sync the requests with DBLs public API,
      # however if the option is set to true, the "vote-sync-token" will not be
      # used, and requests will instead be redirected to Avas public API to
      # try and sync votes made for the public bot.
      sync-with-public-bot: false

      # This is the bot application API token for DBL(Discord Bot List), the API token
      # is used to sync votes between the API and the bot during startup, so anyone
      # who voted while the bot was offline will still get their rewards.
      #
      # You can get your DBL API key at: https://discordbots.org/api/docs#mybots
      #
      vote-sync-token: 'ReplaceThisWithYourAPITokenForDBL'

  #--------------------------------------------------------------------------
  # API Keys (These are all optional)
  #--------------------------------------------------------------------------
  #
  # API keys are access tokens for different services used by Ava to provided
  # additional functionality, all the API key fields are optional, however
  # some services may be disabled if they're left out.
  #

  apiKeys:

      # Holiday API key, this is used for the holiday command
      # in order to retrieve current holiday information.
      #
      # You can get a free API key that allows 1000 requests per-month by signing up on
      # their website, then going to the "API Keys" tab and creating a new key.
      # Get a key at: https://holidayapi.com/
      #
      holidayapi: ''


      # DialogFlow is the service used by Ava for her artificial intelligence,
      # the AI will be disabled without the API key, you can register for
      # an API key on their website as well as creating your own custom
      # AI agent, if you want to use the same AI agent Ava uses you
      # can find it on github at: https://github.com/avaire/agent
      #
      # Get a key at: https://dialogflow.com/docs/reference/agent
      #
      dialogflow: ''

      # Meow API is a simple services that provides lots of cat pictures, the service
      # was custom built for Ava since the old cat picture services was having some
      # issues. The API can be used without a key, although it will only allow
      # 10 requests per minute, if your needs are higher then that, you can
      # request for an API key.
      #
      # Get a key at: https://meow.senither.com/
      #
      meowApi: ''

      # Open Weather Map is a free service that provides lots of ways to get weather
      # and wind data based on a location, Ava uses it for the weather command, if
      # no valid API key is given, the command will disable itself.
      #
      # You can get a free API key that allows 60 requests per-minute by singing up on
      # their website, then going to the "API Keys" tab and creating a new key, keep
      # in mind that it may take a few hours for the API key to fully activate.
      #
      # Get a key at: https://home.openweathermap.org/api_keys
      #
      openWeatherMap: ''
